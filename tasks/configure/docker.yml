---
- name: clickhouse - prepare docker composition
  template:
    src: templates/service/docker-compose.yml.j2
    dest: "{{ clickhouse_dir_config }}/docker-compose.yml"
    owner: "{{ clickhouse_system_user }}"
    group: "{{ clickhouse_system_group }}"
    mode: "0640"
  register: compose_file

- name: clickhouse - validate docker-compose file
  when: compose_file.changed  # noqa: no-handler
  block:
    - name: clickhouse - run docker-compose syntax check
      command: "docker-compose -f {{ clickhouse_dir_config }}/docker-compose.yml config"
      ignore_errors: true
      changed_when: false
      register: docker_compose_file

    - name: clickhouse - validate docker-compose check result
      assert:
        that: not docker_compose_file.failed
        success_msg: docker-compose file syntax is valid
        fail_msg: |
          Docker compose file has invalid syntax. Details:
          {{ docker_compose_file.stderr }}

- name: clickhouse - clean previous docker composition
  when: compose_file.changed  # noqa: no-handler
  docker_compose:
    project_name: "{{ clickhouse_docker_service_name }}"
    project_src: "{{ clickhouse_dir_config }}"
    state: absent
    remove_volumes: true
    remove_orphans: true
  ignore_errors: true

- name: clickhouse - up docker composition
  when: compose_file.changed  # noqa: no-handler
  docker_compose:
    project_name: "{{ clickhouse_docker_service_name }}"
    project_src: "{{ clickhouse_dir_config }}"
    state: present
    build: false
    pull: true
    nocache: false
  register: composition

- name: clickhouse - wait while docker composition become ready
  when: composition.changed and not ansible_check_mode  # noqa: no-handler
  wait_for:
    timeout: 10

- name: clickhouse - check container is running
  when: not ansible_check_mode
  block:
    - name: clickhouse - gather info about container
      docker_container_info:
        name: "{{ clickhouse_docker_container_name }}"
      register: clickhouse_container

    - name: clickhouse - check container is exists
      assert:
        that: clickhouse_container.exists
        success_msg: Container {{ clickhouse_docker_container_name }} is exists
        fail_msg: Container {{ clickhouse_docker_container_name }} is not exists

    - name: clickhouse - check container is running
      assert:
        that: clickhouse_container.container.State.Status == 'running' and clickhouse_container.container.RestartCount < 1
        success_msg: Container {{ clickhouse_docker_container_name }} is running
        fail_msg: |
          Container {{ clickhouse_docker_container_name }} is not running.
          State: {{ clickhouse_container.container.State }}

- name: clickhouse - check ports is listening
  when: not ansible_check_mode
  block:
    - name: clickhouse - gather facts about ports
      listen_ports_facts:

    - name: clickhouse - check ports
      assert:
        that: item | int in (ansible_facts.tcp_listen | map(attribute='port') | sort | list)
      with_items: "{{ clickhouse_docker_published_ports | map(attribute='host') | sort | list }}"

- name: clickhouse - prune docker useless artifacts
  when: clickhouse_docker_prune_after_up and composition.changed and not ansible_check_mode
  docker_prune:
    containers: true
    images: true
    networks: true
    volumes: true
    builder_cache: true
