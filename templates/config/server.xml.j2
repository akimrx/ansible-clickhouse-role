#jinja2: trim_blocks:True, lstrip_blocks:True
<?xml version="1.0"?>
<!-- {{ ansible_managed }} -->
<yandex>
    <logger>
        <level>{{ clickhouse_config_log_level }}</level>
        {% if clickhouse_service_manager == "systemd" %}
        <log>{{ clickhouse_dir_log }}/clickhouse-server.log</log>
        <errorlog>{{ clickhouse_dir_log }}/clickhouse-server.err.log</errorlog>
        {% else %}
        <log>/var/log/clickhouse-server/clickhouse-server.log</log>
        <errorlog>/var/log/clickhouse-server/clickhouse-server.err.log</errorlog>
        {% endif %}
        <size>{{ clickhouse_config_log_size }}</size>
        <count>{{ clickhouse_config_log_count | int }}</count>
    </logger>

    <display_name>{{ clickhouse_prompt }}</display_name>

    <http_port>{{ clickhouse_listen_port_http }}</http_port>
    <tcp_port>{{ clickhouse_listen_port_tcp }}</tcp_port>
    <interserver_http_port>{{ clickhouse_listen_port_interserver }}</interserver_http_port>
    <interserver_http_host>{{ clickhouse_interserver_http_hostname }}</interserver_http_host>

    {% if clickhouse_listen_port_mysql is defined %}
    <mysql_port>{{ clickhouse_listen_port_mysql }}</mysql_port>
    {% endif %}

    {% if clickhouse_enable_secure_protocols %}
    <https_port>{{ clickhouse_listen_port_https }}</https_port>
    <tcp_port_secure>{{ clickhouse_listen_port_tcp_secure }}</tcp_port_secure>

    <!-- Used with https_port and tcp_port_secure. Full ssl options list: https://github.com/ClickHouse-Extras/poco/blob/master/NetSSL_OpenSSL/include/Poco/Net/SSLManager.h#L71 -->
    <openSSL>
        <server> <!-- Used for https server AND secure tcp port -->
            <!-- openssl req -subj "/CN=localhost" -new -newkey rsa:2048 -days 365 -nodes -x509 -keyout /etc/clickhouse-server/server.key -out /etc/clickhouse-server/server.crt -->
            {% if clickhouse_service_manager == "docker" %}
            <certificateFile>/etc/clickhouse-server/server.crt</certificateFile>
            <privateKeyFile>/etc/clickhouse-server/server.key</privateKeyFile>
            {% else %}
            <certificateFile>{{ clickhouse_dir_ssl }}/server.crt</certificateFile>
            <privateKeyFile>{{ clickhouse_dir_ssl }}/server.key</privateKeyFile>
            {% endif %}
            <!-- openssl dhparam -out /etc/clickhouse-server/dhparam.pem 4096 -->
            <!-- dhParamsFile>/etc/clickhouse-server/dhparam.pem</dhParamsFile -->
            <verificationMode>none</verificationMode>
            <loadDefaultCAFile>true</loadDefaultCAFile>
            <cacheSessions>true</cacheSessions>
            <disableProtocols>sslv2,sslv3</disableProtocols>
            <preferServerCiphers>true</preferServerCiphers>
        </server>

        <client> <!-- Used for connecting to https dictionary source -->
            <loadDefaultCAFile>true</loadDefaultCAFile>
            <cacheSessions>true</cacheSessions>
            <disableProtocols>sslv2,sslv3</disableProtocols>
            <preferServerCiphers>true</preferServerCiphers>
            <!-- Use for self-signed: <verificationMode>none</verificationMode> -->
            <invalidCertificateHandler>
                <!-- Use for self-signed: <name>AcceptCertificateHandler</name> -->
                <name>RejectCertificateHandler</name>
            </invalidCertificateHandler>
        </client>
    </openSSL>
    {% endif %}

    {% for host in clickhouse_listen_hosts %}
    <listen_host>{{ host }}</listen_host>
    {% endfor %}

    <!-- Don't exit if ipv6 or ipv4 unavailable, but listen_host with this protocol specified -->
    <listen_try>{{ clickhouse_listen_try }}</listen_try>

    <!-- Allow listen on same address:port -->
    {% if clickhouse_listen_reuse_port %}
    <listen_reuse_port>{{ clickhouse_listen_reuse_port | int }}</listen_reuse_port>
    {% endif %}

    <listen_backlog>{{ clickhouse_listen_backlog }}</listen_backlog>
    <max_connections>{{ clickhouse_config_max_connections | int }}</max_connections>
    <keep_alive_timeout>{{ clickhouse_config_keep_alive_timeout | int }}</keep_alive_timeout>
    <max_concurrent_queries>{{ clickhouse_config_max_concurrent_queries }}</max_concurrent_queries>
    <max_open_files>{{ clickhouse_config_max_open_files }}</max_open_files>
    <max_thread_pool_size>{{ clickhouse_config_max_thread_pool_size }}</max_thread_pool_size>
    <max_server_memory_usage_to_ram_ratio>{{ clickhouse_config_max_server_memory_usage_to_ram_ratio }}</max_server_memory_usage_to_ram_ratio>

    <!-- Size of cache of uncompressed blocks of data, used in tables of MergeTree family.
         In bytes. Cache is single for server. Memory is allocated only on demand.
         Cache is used when 'use_uncompressed_cache' user setting turned on (off by default).
         Uncompressed cache is advantageous only for very short queries and in rare cases. -->
    <uncompressed_cache_size>{{ clickhouse_config_uncompressed_cache_size }}</uncompressed_cache_size>

    <!-- Approximate size of mark cache, used in tables of MergeTree family.
         In bytes. Cache is single for server. Memory is allocated only on demand.
         You should not lower this value. -->
    <mark_cache_size>{{ clickhouse_config_mark_cache_size }}</mark_cache_size>


    <!-- Path to data directory, with trailing slash. -->
    {% if clickhouse_service_manager == "docker" %}
    <path>/var/lib/clickhouse/</path>
    {% else %}
    <path>{{ clickhouse_dir_data }}/</path>
    {% endif %}

    <!-- Path to temporary data for processing hard queries. -->
    {% if clickhouse_service_manager == "docker" %}
    <tmp_path>/var/lib/clickhouse/tmp/</tmp_path>
    {% else %}
    <tmp_path>{{ clickhouse_dir_temp }}/</tmp_path>
    {% endif %}

    <!-- Path to folder where users and roles created by SQL commands are stored. -->
    {% if clickhouse_service_manager == "docker" %}
    <access_control_path>/var/lib/clickhouse/access/</access_control_path>
    {% else %}
    <access_control_path>{{ clickhouse_dir_config }}/access/</access_control_path>
    {% endif %}

    <!-- Directory with user provided files that are accessible by 'file' table function. -->
    {% if clickhouse_service_manager == "docker" %}
    <user_files_path>/var/lib/clickhouse/user_files/</user_files_path>
    {% else %}
    <user_files_path>{{ clickhouse_dir_user_files }}/</user_files_path>
    {% endif %}

    <!-- Path to configuration file with users, access rights, profiles of settings, quotas. -->
    {% if clickhouse_service_manager == "docker" %}
    <users_config>users.xml</users_config>
    {% else %}
    <users_config>{{ clickhouse_dir_config }}/users.xml</users_config>
    {% endif %}

    <!-- Default profile of settings. -->
    <default_profile>{{ clickhouse_default_profile | default('default') }}</default_profile>

    <!-- Default database. -->
    <default_database>{{ clickhouse_default_database_name }}</default_database>

    <!-- Server time zone could be set here.

         Time zone is used when converting between String and DateTime types,
          when printing DateTime in text formats and parsing DateTime from text,
          it is used in date and time related functions, if specific time zone was not passed as an argument.

         Time zone is specified as identifier from IANA time zone database, like UTC or Africa/Abidjan.
         If not specified, system time zone at server startup is used.

         Please note, that server could display time zone alias instead of specified name.
         Example: W-SU is an alias for Europe/Moscow and Zulu is an alias for UTC.
    -->
    <timezone>{{ clickhouse_config_timezone }}</timezone>

    <!-- You can specify umask here (see "man umask"). Server will apply it on startup.
         Number is always parsed as octal. Default umask is 027 (other users cannot read logs, data files, etc; group can only read).
    -->
    <umask>{{ clickhouse_config_umask | string }}</umask>

    <!-- Perform mlockall after startup to lower first queries latency
          and to prevent clickhouse executable from being paged out under high IO load.
         Enabling this option is recommended but will lead to increased startup time for up to a few seconds.
    -->
    <mlock_executable>{{ clickhouse_config_mlock_executable | lower }}</mlock_executable>

    <macros>
        <shard>{{ clickhouse_macros_shard_name | string }}</shard>
        <replica>{{ clickhouse_macros_replica_name }}</replica>
    </macros>

    {% if clickhouse_zookeeper_enabled and clickhouse_zookeeper_hosts is defined %}
    <zookeeper>
        {% for zookeeper in clickhouse_zookeeper_hosts %}
        <node index="{{ loop.index }}">
            <host>{{ zookeeper.fqdn }}</host>
            <port>{{ zookeeper.port }}</port>
        </node>
        {% endfor %}
        <session_timeout_ms>{{ clickhouse_zookeeper_session_timeout_ms }}</session_timeout_ms>
        <operation_timeout_ms>{{ clickhouse_zookeeper_operation_timeout_ms }}</operation_timeout_ms>
        {% if clickhouse_zookeeper_identity is defined and clickhouse_zookeeper_identity != "" %}
        <identity>{{ clickhouse_zookeeper_identity }}</identity>
        {% endif %}
    </zookeeper>
    {% endif %}


    <!-- Reloading interval for embedded dictionaries, in seconds. Default: 3600. -->
    <builtin_dictionaries_reload_interval>{{ clickhouse_config_builtin_dictionaries_reload_interval }}</builtin_dictionaries_reload_interval>

    <!-- Maximum session timeout, in seconds. Default: 3600. -->
    <max_session_timeout>{{ clickhouse_config_max_session_timeout | int }}</max_session_timeout>

    <!-- Default session timeout, in seconds. Default: 60. -->
    <default_session_timeout>{{ clickhouse_config_default_session_timeout | int }}</default_session_timeout>

    <!-- Query log. Used only for queries with setting log_queries = 1. -->
    <query_log>
        <database>{{ clickhouse_query_log_database }}</database>
        <table>{{ clickhouse_query_log_table }}</table>
        <engine>{{ clickhouse_query_log_engine }}</engine>
        <flush_interval_milliseconds>{{ clickhouse_query_log_flush_interval_milliseconds }}</flush_interval_milliseconds>
    </query_log>

    {% if clickhouse_part_log_enabled %}
    <part_log>
        <database>{{ clickhouse_part_log_database }}</database>
        <table>{{ clickhouse_part_log_table }}</table>
        <partition_by>{{ clickhouse_part_log_partition_by }}</partition_by>
        <flush_interval_milliseconds>{{ clickhouse_part_log_flush_interval_milliseconds | int }}</flush_interval_milliseconds>
    </part_log>
    {% endif %}

    <!-- Configuration of external dictionaries. See:
         https://clickhouse.yandex/docs/en/dicts/external_dicts/
    -->
    <dictionaries_config>{{ clickhouse_dir_config }}/*_dictionary.xml</dictionaries_config>

    {% if clickhouse_compression is defined %}
    <compression>
        {% for case in clickhouse_compression %}
        <case>
            {% for key, value in case.items() %}
            <{{ key }}>{{ value }}</{{ key }}>
            {% endfor %}
        </case>
        {% endfor %}
    </compression>
    {% endif %}

    <!-- Allow to execute distributed DDL queries (CREATE, DROP, ALTER, RENAME) on cluster.
         Works only if ZooKeeper is enabled. Comment it if such functionality isn't required. -->
    <distributed_ddl>
        <!-- Path in ZooKeeper to queue with DDL queries -->
        <path>{{ clickhouse_distributed_ddl_zookeeper_path }}</path>

        <!-- Settings from this profile will be used to execute DDL queries -->
        {% if clickhouse_distributed_ddl_profile is defined and clickhouse_distributed_ddl_profile != '' %}
        <profile>{{ clickhouse_distributed_ddl_profile }}</profile>
        {% endif %}
    </distributed_ddl>

    {% if clickhouse_sharding_clusters is defined %}
    <remote_servers>
    {% for cluster in clickhouse_sharding_clusters %}
        <{{ cluster.name }}>
        {% for shard in cluster.shards %}
            <shard>
                <weight>{{ shard.weight | default(1) }}</weight>
                <internal_replication>{{ shard.internal_replication | default('true') | lower }}</internal_replication>
                {% for replica in shard.replicas %}
                <replica>
                    <priority>{{ replica.priority | default(1) }}</priority>
                    <secure>{{ replica.secure | default(0) }}</secure>
                    <host>{{ replica.host }}</host>
                    <port>{{ replica.port }}</port>
                    <user>{{ replica.user }}</user>
                    <password>{{ replica.password }}</password>
                </replica>
                {% endfor %}
            </shard>
        {% endfor%}
        </{{ cluster.name }}>
    {% endfor %}
    </remote_servers>
    {% endif %}

    <resharding>
        <task_queue_path>{{ clickhouse_resharding_task_queue_path }}</task_queue_path>
    </resharding>

    {% if clickhouse_merge_tree_settings is defined %}
    <!-- Settings to fine tune MergeTree tables. See documentation in source code, in MergeTreeSettings.h -->
    <merge_tree>
    {% for name, value in clickhouse_merge_tree_settings.items() %}
        <{{ name }}>{{ value }}</{{ name }}>
    {% endfor %}
    </merge_tree>
    {% endif %}

    <!-- Protection from accidental DROP.
         If size of a MergeTree table is greater than max_table_size_to_drop (in bytes) than table could not be dropped with any DROP query.
         If you want do delete one table and don't want to restart clickhouse-server, you could create special file <clickhouse-path>/flags/force_drop_table and make DROP once.
         By default max_table_size_to_drop is 50GB; max_table_size_to_drop=0 allows to DROP any tables.
         The same for max_partition_size_to_drop.
         Uncomment to disable protection.
    -->
    <max_table_size_to_drop>{{ clickhouse_config_max_table_size_to_drop }}</max_table_size_to_drop>
    <max_partition_size_to_drop>{{ clickhouse_config_max_partition_size_to_drop }}</max_partition_size_to_drop>

    {% if clickhouse_graphite_rollout is defined %}
    <graphite_rollup>
        <path_column_name>{{ clickhouse_graphite_rollout.path_column_name | default('Path') }}</path_column_name>
        <time_column_name>{{ clickhouse_graphite_rollout.time_column_name | default('Time') }}</time_column_name>
        <value_column_name>{{ clickhouse_graphite_rollout.value_column_name | default('Value') }}</value_column_name>
        <version_column_name>{{ clickhouse_graphite_rollout.version_column_name | default('Timestamp') }}</version_column_name>
        {% for pattern in clickhouse_graphite_rollup.patterns %}
        <{{ pattern }}>
            {% if pattern.regexp is defined and pattern.regexp != '' %}
            <regexp>pattern.regexp</regexp>
            {% endif %}
            <function>{{ pattern.function | default('avg') }}</function>
            {% for retention in pattern.retentions %}
            <retention>
                <age>{{ retention.age }}</age>
                <precision>{{ retention.precision }}</precision>
            </retention>
            {% endfor %}
        </{{ pattern }}>
        {% endfor %}
    </graphite_rollup>
    {% endif %}

    <!-- Directory in <clickhouse-path> containing schema files for various input formats.
         The directory will be created if it doesn't exist.
      -->
    {% if clickhouse_service_manager == "docker" %}
    <format_schema_path>/var/lib/clickhouse/format_schemas/</format_schema_path>
    {% else %}
    <format_schema_path>{{ clickhouse_dir_format_schemas }}/</format_schema_path>
    {% endif %}

    <!-- Uncomment to disable ClickHouse internal DNS caching. -->
    <!-- <disable_internal_dns_cache>1</disable_internal_dns_cache> -->

    {% if clickhouse_config_custom_settings is defined %}
    <!-- Custom uncovered settings -->
    {% for key, value in clickhouse_config_custom_settings.items() %}
    <{{ key }}>{{ value }}</{{ key }}>
    {% endfor %}
    {% endif %}

</yandex>
